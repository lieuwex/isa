<type> ::= int | (array <type>) | (slice <type>)

All argument passing is by value, and no two objects may be functionally
observed to point to the same value. However, slice objects internally refer to
the array they were constructed with.

The lifetime of a value created in an expression is until the end of the
statement containing the expression. The lifetime of the value pointed to by a
local variable is until the end of the scope of that variable.

A value of type (array T) is created using the intrinsic expression (array
<type> <int>), where <int> is an integer-valued expression signifying the length
of the array.

A value of type (slice T) is created using the intrinsic expression (slice
<array> <start> <length>), where <array> is an array- or slice-valued expression
and <start> and <length> are integer-valued expressions. The slice object
represents the specified subarray of the given array.

A slice contains a reference to the array it was constructed with, and should
not outlive its lifetime.

An element of an array or slice value is accessed using the intrinsic expression
(at <obj> <idx>), where <obj> is either of type (array T) or (slice T) and <idx>
is an integer-valued expression signifying the requested index into the
sequence.

An element of an array or slice value is modified using the intrinsic expression
(set-at <obj> <idx> <value>), where <obj> is either of type (array T) or (slice
T), <idx> is an integer-valued expression and <value> is a T-valued expression.
The element at index <idx> in <obj> is changed to <value>.



# vim: set et tw=80:
